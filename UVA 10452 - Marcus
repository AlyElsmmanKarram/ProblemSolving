#include<iostream>
#include<vector>

using namespace std;

int n, m;
string cobblestone_path[10];
bool vis[10][10];
vector<string> road;

bool valid_direction(int x, int y) {
	return x >= 0 && x < n && y >= 0 && y < m;
}

bool valid_path(char c) {
	return c == 'I' || c == 'E' || c == 'H' || c == 'O' || c == 'V' || c == 'A'
			|| c == '#' || c == '@';
}

void directions(int x, int y, string s) {
	if (!valid_direction(x, y) || !valid_path(cobblestone_path[x][y])
			|| vis[x][y]) {
		return;
	}
	vis[x][y] = true;

	directions(x, y + 1, "right");
	directions(x, y - 1, "left");
	directions(x - 1, y, "forth");

	road.push_back(s);
}

int main() {
	int t, x, y;
	cin >> t;
	while (t--) {
		cin >> n >> m;
		for (int i = 0, f = 1; i < n; i++) {
			cin >> cobblestone_path[i];
			for (int j = 0; j < m && f; j++) {
				if (cobblestone_path[i][j] == '@') {
					x = i, y = j, f = 0;
				}
			}
		}
		directions(x, y, "");

		for (int i = road.size() - 1; i >= 0; i--) {
			cout << road[i];
			if (i > 0 && i < (int) road.size() - 1) {
				cout << " ";
			}
		}
		cout << endl;

		//clear
		road.clear();
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				vis[i][j] = 0;
	}
	return 0;
}
